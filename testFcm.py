import firebase_admin
from firebase_admin import credentials, messaging, firestore
import threading

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
cred = credentials.Certificate("C:/Users/user/Desktop/service-account.json")
firebase_admin.initialize_app(cred)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç Firestore –∏–∑ firebase_admin
db = firestore.client()
def send_push_to_all(body: str):
    users_ref = db.collection("users").stream()
    for user_doc in users_ref:
        user_data = user_doc.to_dict()
        token = user_data.get("token")
        if token:
            message = messaging.Message(
                notification=messaging.Notification(
                    title="üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                    body=body,
                ),
                token=token
            )
            try:
                response = messaging.send(message)
                print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_doc.id}: {response}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_doc.id}:", e)

def send_push(token: str, body: str):
    if token == "all":
        send_push_to_all(body)
    else:
        message = messaging.Message(
            notification=messaging.Notification(
                title="üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                body=body,
            ),
            token=token
        )
        try:
            response = messaging.send(message)
            print("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:", response)
        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", e)

def on_snapshot(col_snapshot, changes, read_time):
    for change in changes:
        if change.type.name == 'ADDED':
            doc = change.document
            data = doc.to_dict()
            token = data.get("token")
            body = data.get("message")

            if token and body:
                print(f"üì® –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ -> Token: {token}")
                send_push(token, body)

                # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                doc.reference.delete()  # –∏–ª–∏ .update({"sent": True})
            else:
                print("‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ:", data)

def listen_for_pushes():
    col_query = db.collection("push")
    col_query.on_snapshot(on_snapshot)

# –ó–∞–ø—É—Å–∫
print("üëÇ –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—É—à-—Å–æ–æ–±—â–µ–Ω–∏–π...")
listen_thread = threading.Thread(target=listen_for_pushes, daemon=True)
listen_thread.start()

# –£–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ —Ä–∞–±–æ—á–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
try:
    while True:
        pass
except KeyboardInterrupt:
    print("üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
